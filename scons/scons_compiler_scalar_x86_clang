#!/usr/bin/env python
# T. M. Kelley
# Jan 22, 2007
# Header for scons_project
# (c) Copyright 2006-14 LANSLLC all rights reserved.

# This input file defines a scons build environment for scalar, clang, x86 builds.
# This should be the last file included into a library or application.

import os
import subprocess

cc  = "clang"
cxx = "clang++"


abi_flag = "-m%s " % build_precision

# from old build system
compile_flags = " -std=c++11 -O%s -Wall -pedantic " % (opt)

if debug:
    compile_flags += " -gdwarf-2"

# look for flags defined in the environment
env_cxxflags = " "
env_cflags   = " "
env_ldflags  = " "
env_cppflags = " "
try:
    env_cxxflags += os.environ["CXXFLAGS"]
except KeyError:
    pass
try:
    env_cflags   += os.environ["CFLAGS"]
except KeyError:
    pass
try:
    env_ldflags  += os.environ["LDFLAGS"]
except KeyError:
    pass
try:
    env_cppflags += os.environ["CPPFLAGS"]
except KeyError:
    pass

cxxflags += abi_flag + env_cxxflags + compile_flags
cflags   += abi_flag + env_cflags   + compile_flags
ldflags  += abi_flag + env_ldflags

cppflags += env_cppflags + " -DADDRESSING_%s -DDBC=%s" % (build_precision, dbc)

path = os.environ["PATH"]
x86_env = Environment( CXX = cxx,
                       CC  = cc,
                       CFLAGS     = cflags,
                       CXXFLAGS   = cxxflags,
                       CPPFLAGS   = cppflags,
                       CPPDEFINES = cppdefines,
                       LINKFLAGS  = ldflags,
                       CPPPATH    = cpppaths,
                       ENV = {'PATH' : path}
                       )

env = x86_env

# define an include guard that SConstruct files can look for--thus excluding
# redundant inclusions and extra-long compile command line intrusions.
scons_compiler_scalar_x86_gnu_included = True


# version
__id__ = "$Id: scons_compiler_scalar_x86_gnu,v 1.2 2009/06/18 15:03:41 tkelley Exp $"

# End of file
