#!/usr/bin/env python
# scons_project.py
# T. M. Kelley
# Jan 22, 2007
# Header for scons_project
# (c) Copyright 2006 LANSLLC all rights reserved.

# This input file defines a scons build environment for MPI.
# This should be the last file included into a library or application.

import os


import subprocess

# This is intended for commands that return zero or one lines of output.
def runcmd(l):
    return subprocess.Popen(l, stdout=subprocess.PIPE).communicate()[0].strip()


# see if we can find mpicc
mpicc_path  = runcmd(["which","mpicc"])
mpicxx_path = runcmd(["which","mpicxx"])

if len(mpicc_path) == 0:
    print "scons_compiler_mpi_x86_gnu: Couldn't find 'mpicc' in your path; have you loaded your MPI module?"
    raise

if len(mpicxx_path) == 0:
    print "scons_compiler_mpi_x86_gnu: Couldn't find 'mpicxx' in your path; have you loaded your MPI module?"
    raise


# Grab the compilation flags for both compilers.  I'm not doing a good
# job of breaking things into CPPFLAGS vs. CFLAGS/CXXFLAGS or between
# LDFLAGS and LIBS, just because it is a pain

mpi_cppflags = " -DOMPI_SKIP_MPICXX"
mpi_cflags   = runcmd([mpicc_path,  "--showme:compile"])
mpi_cxxflags = runcmd([mpicxx_path, "--showme:compile"])

# We are going to use the C++ compiler to determine the link flags,
# since that is what we will need at the end of the day

mpi_ldflags = runcmd([mpicxx_path, "--showme:link"])
mpi_libs = []

## Build up the host flags based on what we discovered so far.  This is
## also where we add in some user-specified flags

cxx = mpicxx_path
cc  = mpicc_path

cxx = "g++"
cc  = "gcc"

abi_flag = "-m%s " % build_precision
compile_flags = " -O%s -Wnon-virtual-dtor -Wreturn-type -pedantic -Wno-long-long -finline-functions" % (opt)

if debug:
    compile_flags += " -g"

# look for flags defined in the environment
env_cxxflags = " "
env_cflags   = " "
env_ldflags  = " "
env_cppflags = " "
try:
    env_cxxflags += os.environ["CXXFLAGS"]
except KeyError:
    pass
try:
    env_cflags  += os.environ["CFLAGS"]
except KeyError:
    pass
try:
    env_ldflags  += os.environ["LDFLAGS"]
except KeyError:
    pass
try:
    env_cppflags += os.environ["CPPFLAGS"]
except KeyError:
    pass
                                
cxxflags += abi_flag + mpi_cxxflags + env_cxxflags + compile_flags
cflags   += abi_flag + mpi_cflags   + env_cflags   + compile_flags
ldflags  += abi_flag + mpi_ldflags  + env_ldflags

cppflags += mpi_cppflags + env_cppflags + " -DADDRESSING_%s -DDBC=%s" % (build_precision, dbc)

path = os.environ["PATH"]

x86_env = Environment( CXX = cxx,
                       CC  = cc,
                       CFLAGS     = cflags    ,
                       CXXFLAGS   = cxxflags  ,
                       CPPFLAGS   = cppflags  ,
                       CPPDEFINES = cppdefines,
                       LINKFLAGS  = ldflags   ,
                       CPPPATH    = cpppaths  ,
                       ENV = {'PATH' : path}
                       )

# env = gnu_env


# help mangle names
fortran_suffix = "_"

# define an include guard that SConstruct files can look for--thus excluding
# redundant inclusions and extra-long compile command line intrusions. 
scons_compiler_mpi_x86_gnu_included = True


# version
__id__ = "$Id: scons_compiler_mpi_x86_gnu,v 1.7 2009/06/18 15:03:41 tkelley Exp $"

# End of file











